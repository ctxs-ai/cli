import { z } from 'zod';
import E from 'path';
import { red, yellow, cyan, green } from 'kleur/colors';
import d from 'deepmerge';
import { HttpsProxyAgent } from 'https-proxy-agent';
import C from 'node-fetch';

var x=z.enum(["registry:lib","registry:block","registry:component","registry:ui","registry:hook","registry:page","registry:file","registry:theme","registry:example","registry:style","registry:internal"]),k=z.discriminatedUnion("type",[z.object({path:z.string(),content:z.string().optional(),type:z.enum(["registry:file","registry:page"]),target:z.string()}),z.object({path:z.string(),content:z.string().optional(),type:x.exclude(["registry:file","registry:page"]),target:z.string().optional()})]),j=z.object({config:z.object({content:z.array(z.string()).optional(),theme:z.record(z.string(),z.any()).optional(),plugins:z.array(z.string()).optional()}).optional()}),R=z.object({light:z.record(z.string(),z.string()).optional(),dark:z.record(z.string(),z.string()).optional()}),l=z.object({$schema:z.string().optional(),name:z.string(),type:x,title:z.string().optional(),author:z.string().min(2).optional(),description:z.string().optional(),dependencies:z.array(z.string()).optional(),devDependencies:z.array(z.string()).optional(),registryDependencies:z.array(z.string()).optional(),files:z.array(k).optional(),tailwind:j.optional(),cssVars:R.optional(),meta:z.record(z.string(),z.any()).optional(),docs:z.string().optional(),categories:z.array(z.string()).optional()}),F=z.object({name:z.string(),homepage:z.string(),items:z.array(l)}),h=z.array(l),G=z.array(z.object({name:z.string(),label:z.string()})),H=z.record(z.string(),z.record(z.string(),z.string())),q=z.object({inlineColors:z.object({light:z.record(z.string(),z.string()),dark:z.record(z.string(),z.string())}),cssVars:z.object({light:z.record(z.string(),z.string()),dark:z.record(z.string(),z.string())}),cssVarsV4:z.object({light:z.record(z.string(),z.string()),dark:z.record(z.string(),z.string())}).optional(),inlineColorsTemplate:z.string(),cssVarsTemplate:z.string()}),w=l.pick({dependencies:!0,devDependencies:!0,files:!0,tailwind:!0,cssVars:!0,docs:!0});var g={error:red,warn:yellow,info:cyan,success:green};var a={error(...r){console.log(g.error(r.join(" ")));},warn(...r){console.log(g.warn(r.join(" ")));},info(...r){console.log(g.info(r.join(" ")));},success(...r){console.log(g.success(r.join(" ")));},log(...r){console.log(r.join(" "));},break(){console.log("");}};function y(r){if(a.error("Something went wrong. Please check the error below for more details."),a.error("If the problem persists, please open an issue on GitHub."),a.error(""),typeof r=="string"&&(a.error(r),a.break(),process.exit(1)),r instanceof z.ZodError){a.error("Validation failed:");for(let[n,t]of Object.entries(r.flatten().fieldErrors))a.error(`- ${g.info(n)}: ${t}`);a.break(),process.exit(1);}r instanceof Error&&(a.error(r),console.error(r),a.break(),process.exit(1)),a.break(),process.exit(1);}var U=process.env.REGISTRY_URL??"https://ctxs.ai/r",M=process.env.https_proxy?new HttpsProxyAgent(process.env.https_proxy):void 0,u=new Map;async function A(){try{let[r]=await m(["index.json"]);return h.parse(r)}catch(r){a.error(`
`),y(r);}}async function me(r,n){try{let[t]=await m([S(r)?r:`styles/${n}/${r}.json`]);return l.parse(t)}catch(t){return a.break(),y(t),null}}async function L(r,n){let t=[];for(let o of n){let i=r.find(s=>s.name===o);if(i&&(t.push(i),i.registryDependencies)){let s=await L(r,i.registryDependencies);t.push(...s);}}return t.filter((o,i,s)=>s.findIndex(c=>c.name===o.name)===i)}async function fe(r,n){try{let t=n.map(i=>`styles/${r}/${i.name}.json`),o=await m(t);return h.parse(o)}catch(t){y(t);}}async function ue(r,n,t){if(t)return t;let[o,i]=n.type?.split(":")??[];return o in r.resolvedPaths?E.join(r.resolvedPaths[o],i):null}async function m(r){try{return await Promise.all(r.map(async t=>{let o=I(t);if(u.has(o))return u.get(o);let i=(async()=>{let s=await C(o,{agent:M});if(!s.ok){let c={400:"Bad request",401:"Unauthorized",403:"Forbidden",404:"Not found",500:"Internal server error"};if(s.status===401)throw new Error(`You are not authorized to access the component at ${g.info(o)}.
If this is a remote registry, you may need to authenticate.`);if(s.status===404)throw new Error(`The component at ${g.info(o)} was not found.
It may not exist at the registry. Please make sure it is a valid component.`);if(s.status===403)throw new Error(`You do not have access to the component at ${g.info(o)}.
If this is a remote registry, you may need to authenticate or a token.`);let p=await s.json(),f=p&&typeof p=="object"&&"error"in p?p.error:s.statusText||c[s.status];throw new Error(`Failed to fetch from ${g.info(o)}.
${f}`)}return s.json()})();return u.set(o,i),i}))}catch(n){return a.error(`
`),y(n),[]}}function he(){u.clear();}async function de(r,n){try{if(!await A())return null;r.includes("index")&&r.unshift("index");let o=await _(r,n),i=await m(o),s=z.array(l).parse(i);return s?w.parse({dependencies:d.all(s.map(c=>c.dependencies??[])),devDependencies:d.all(s.map(c=>c.devDependencies??[])),files:d.all(s.map(c=>c.files??[]))}):null}catch(t){return y(t),null}}async function Y(r,n){let t=new Set,o=[];async function i(s){let c=I(s);if(!t.has(c)){t.add(c);try{let[p]=await m([c]),f=l.parse(p);if(o.push(c),f.registryDependencies)for(let b of f.registryDependencies)await i(b);}catch(p){console.error(`Error fetching or parsing registry item at ${s}:`,p);}}}return await i(r),Array.from(new Set(o))}function I(r){if(S(r)){let n=new URL(r);return n.pathname.match(/\/chat\/b\//)&&!n.pathname.endsWith("/json")&&(n.pathname=`${n.pathname}/json`),n.toString()}return `${U}/${r}`}function S(r){try{return new URL(r),!0}catch{return !1}}async function _(r,n){let t=[];for(let o of r){let i=await Y(o);t.push(...i);}return Array.from(new Set(t))}function xe(){return new Map([["registry:ui","ui"],["registry:lib","lib"],["registry:hook","hooks"],["registry:block","components"],["registry:component","components"]])}function we(r){let n=new Map;return r.forEach(t=>{t.registryDependencies&&t.registryDependencies.forEach(o=>{n.set(o,t);});}),n}

export { g as a, a as b, y as c, x as d, k as e, j as f, R as g, l as h, F as i, h as j, G as k, H as l, q as m, w as n, A as o, me as p, L as q, fe as r, ue as s, m as t, he as u, de as v, _ as w, xe as x, we as y };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=chunk-Y27KWSGT.js.map