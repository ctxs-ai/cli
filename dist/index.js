#!/usr/bin/env node
import { b as b$1, c, o, a, r, s, v } from './chunk-Y27KWSGT.js';
export { u as clearRegistryCache, t as fetchRegistry, r as fetchTree, s as getItemTargetPath, o as getRegistryIndex, p as getRegistryItem, y as getRegistryParentMap, x as getRegistryTypeAliasMap, v as registryResolveItemsTree, w as resolveRegistryItems, q as resolveTree } from './chunk-Y27KWSGT.js';
import x, { basename } from 'path';
import q from 'ora';
import { existsSync, promises } from 'fs';
import { cosmiconfig } from 'cosmiconfig';
import 'fast-glob';
import { z } from 'zod';
import oe from 'fs-extra';
import 'tsconfig-paths';
import ne from 'prompts';
import { Command } from 'commander';
import { tmpdir } from 'os';
import { transformFromAstSync } from '@babel/core';
import { parse } from '@babel/parser';
import ue from '@babel/plugin-transform-typescript';
import * as k from 'recast';
import { Project, ScriptKind } from 'ts-morph';
import { diffLines } from 'diff';

function b(t,o){return q({text:t,isSilent:o?.silent})}cosmiconfig("components",{searchPlaces:["components.json"]});var Z=z.object({$schema:z.string().optional(),aliases:z.object({components:z.string().optional(),utils:z.string().optional(),ui:z.string().optional(),lib:z.string().optional(),hooks:z.string().optional()})}).strict(),N=Z.extend({resolvedPaths:z.object({cwd:z.string()})});z.record(N);async function y(t){let o=await ee(t);return o?await A(t,o):(b$1.error(`No config found in ${a.info(t)}.`),null)}async function A(t,o){return N.parse({...o,resolvedPaths:{cwd:t}})}async function ee(t){try{return {aliases:{},resolvedPaths:{cwd:t}}}catch{let e=`${t}/components.json`;throw new Error(`Invalid configuration found in ${a.info(e)}.`)}}z.object({compilerOptions:z.object({paths:z.record(z.string().or(z.array(z.string())))})});async function T(t){await oe.pathExists(x.resolve(t,"src"));return {}}async function U(t,o,e){if(!t?.length)return {filesCreated:[],filesUpdated:[],filesSkipped:[]};e={overwrite:!1,force:!1,silent:!1,isRemote:!1,...e};let n=b("Updating files.",{silent:e.silent})?.start();await Promise.all([T(o.resolvedPaths.cwd)]);let a$1=[],s=[],p=[];for(let c of t){if(!c.content)continue;let l=ie(c,o,{commonRoot:se(t.map(C=>C.path),c.path)}),w=basename(c.path),m=x.dirname(l),v=existsSync(l),E=c.content;if(v){let C=await promises.readFile(l,"utf-8"),[H,X]=await Promise.all([_(C),_(E)]);if(H===X){p.push(x.relative(o.resolvedPaths.cwd,l));continue}}if(v&&!e.overwrite){n.stop(),e.rootSpinner&&e.rootSpinner.stop();let{overwrite:C}=await ne({type:"confirm",name:"overwrite",message:`The file ${a.info(w)} already exists. Would you like to overwrite?`,initial:!1});if(!C){p.push(x.relative(o.resolvedPaths.cwd,l)),e.rootSpinner&&e.rootSpinner.start();continue}n?.start(),e.rootSpinner&&e.rootSpinner.start();}existsSync(m)||await promises.mkdir(m,{recursive:!0}),await promises.writeFile(l,E,"utf-8"),v?s.push(x.relative(o.resolvedPaths.cwd,l)):a$1.push(x.relative(o.resolvedPaths.cwd,l));}if(!(a$1.length||s.length)&&!p.length&&n?.info("No files updated."),a$1.length){if(n?.succeed(`Created ${a$1.length} ${a$1.length===1?"file":"files"}:`),!e.silent)for(let c of a$1)b$1.log(`  - ${c}`);}else n?.stop();if(s.length&&(b(`Updated ${s.length} ${s.length===1?"file":"files"}:`,{silent:e.silent})?.info(),!e.silent))for(let c of s)b$1.log(`  - ${c}`);if(p.length&&(b(`Skipped ${p.length} ${s.length===1?"file":"files"}: (files might be identical, use --overwrite to overwrite)`,{silent:e.silent})?.info(),!e.silent))for(let c of p)b$1.log(`  - ${c}`);return e.silent||b$1.break(),{filesCreated:a$1,filesUpdated:s,filesSkipped:p}}function ie(t,o,e){if(t.target)return t.target.startsWith("~/")?x.join(o.resolvedPaths.cwd,t.target.replace("~/","")):x.join(o.resolvedPaths.cwd,t.target)}function se(t,o){let e=t.map(s=>s.replace(/^\//,"")),n=o.replace(/^\//,""),i=n.split("/").slice(0,-1).join("/");if(!i)return "";let a=i.split("/");for(let s=a.length;s>0;s--){let p=a.slice(0,s).join("/");if(e.some(c=>c!==n&&c.startsWith(p+"/")))return "/"+p}return "/"+i}async function _(t){return t.replace(/\r\n/g,`
`).trim()}async function L(t,o,e){return e={overwrite:!1,silent:!1,isNewProject:!1,...e},await ae(t,o,e)}async function ae(t,o,e){let n=b("Checking registry.",{silent:e.silent})?.start(),i=await v(t,o);if(!i)return n?.fail(),c(new Error("Failed to fetch components from registry."));n?.succeed(),await U(i.files,o,{overwrite:e.overwrite,silent:e.silent}),i.docs&&b$1.info(i.docs);}var fe=z.object({components:z.array(z.string()).optional(),yes:z.boolean(),overwrite:z.boolean(),cwd:z.string(),all:z.boolean(),path:z.string().optional(),silent:z.boolean(),srcDir:z.boolean().optional(),cssVariables:z.boolean(),skipPreflight:z.boolean().optional()}),J=new Command().name("add").description("add a component to your project").argument("[components...]","the components to add or a url to the component.").option("-y, --yes","skip confirmation prompt.",!1).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").option("-s, --silent","mute output.",!1).option("--src-dir","use the src directory when creating a new project.",!1).option("--no-src-dir","do not use the src directory when creating a new project.").option("--css-variables","use css variables for theming.",!0).option("--no-css-variables","do not use css variables for theming.").option("--skip-preflight","skip preflight checks for components.json and tailwind config").action(async(t,o)=>{try{let e=fe.parse({components:t,cwd:x.resolve(o.cwd),...o});e.components?.length||(e.components=await me(e)),console.log("options.components",e.components);let n=await y(e.cwd);if(!n){b$1.break(),c(new Error("Failed to get config."));return}await L(e.components,n,e);}catch(e){b$1.break(),c(e);}});async function me(t){let o$1=await o();if(!o$1)return b$1.break(),c(new Error("Failed to fetch registry index.")),[];if(t.all)return o$1.map(i=>i.name);if(t.components?.length)return t.components;let{components:e}=await ne({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:o$1.map(i=>({title:i.name,value:`/gh/${i.author}/${i.name}.json`,selected:t.all?!0:t.components?.includes(i.name)}))});e?.length||(b$1.warn("No components selected. Exiting."),b$1.info(""),process.exit(1));let n=z.array(z.string()).safeParse(e);return n.success?n.data:(b$1.error(""),c(new Error("Something went wrong. Please try again.")),[])}var he={sourceType:"module",allowImportExportEverywhere:!0,allowReturnOutsideFunction:!0,startLine:1,tokens:!0,plugins:["asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","classStaticBlock","decimal","decorators-legacy","doExpressions","dynamicImport","exportDefaultFrom","exportNamespaceFrom","functionBind","functionSent","importAssertions","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{proposal:"minimal"}],["recordAndTuple",{syntaxType:"hash"}],"throwExpressions","topLevelAwait","v8intrinsic","typescript","jsx"]},V=async({sourceFile:t,config:o})=>{let e=t.getFullText();if(o.tsx)return e;let n=k.parse(e,{parser:{parse:a=>parse(a,he)}}),i=transformFromAstSync(n,e,{cloneInputAst:!1,code:!1,ast:!0,plugins:[ue],configFile:!1});if(!i||!i.ast)throw new Error("Failed to transform JSX");return k.print(i.ast).code};var Pe=new Project({compilerOptions:{}});async function ve(t){let o=await promises.mkdtemp(x.join(tmpdir(),"shadcn-"));return x.join(o,t)}async function W(t,o=[]){let e=await ve(t.filename),n=Pe.createSourceFile(e,t.raw,{scriptKind:ScriptKind.TSX});for(let i of o)await i({sourceFile:n,...t});return t.transformJsx?await V({sourceFile:n,...t}):n.getText()}var Te=z.object({component:z.string().optional(),yes:z.boolean(),cwd:z.string(),path:z.string().optional()}),B=new Command().name("diff").description("check for updates against the registry").argument("[component]","the component name").option("-y, --yes","skip confirmation prompt.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(t,o$1)=>{try{let e=Te.parse({component:t,...o$1}),n=x.resolve(e.cwd);existsSync(n)||(b$1.error(`The path ${n} does not exist. Please try again.`),process.exit(1));let i=await y(n);i||(b$1.warn(`Configuration is missing. Please run ${a.success("init")} to create a components.json file.`),process.exit(1));let a$1=await o();if(a$1||(c(new Error("Failed to fetch registry index.")),process.exit(1)),!e.component){let u=i.resolvedPaths.components,c=a$1.filter(w=>{for(let m of w.files??[]){let v=x.resolve(u,typeof m=="string"?m:m.path);if(existsSync(v))return !0}return !1}),l=[];for(let w of c){let m=await G(w,i);m.length&&l.push({name:w.name,changes:m});}l.length||(b$1.info("No updates found."),process.exit(0)),b$1.info("The following components have updates available:");for(let w of l){b$1.info(`- ${w.name}`);for(let m of w.changes)b$1.info(`  - ${m.filePath}`);}b$1.break(),b$1.info(`Run ${a.success("diff <component>")} to see the changes.`),process.exit(0);}let s=a$1.find(u=>u.name===e.component);s||(b$1.error(`The component ${a.success(e.component)} does not exist.`),process.exit(1));let p=await G(s,i);p.length||(b$1.info(`No updates found for ${e.component}.`),process.exit(0));for(let u of p)b$1.info(`- ${u.filePath}`),await ke(u.patch),b$1.info("");}catch(e){c(e);}});async function G(t,o){let e=await r(o.style,[t]);if(!e)return [];let n=[];for(let i of e){let a=await s(o,i);if(a)for(let s of i.files??[]){let p=x.resolve(a,typeof s=="string"?s:s.path);if(!existsSync(p))continue;let u=await promises.readFile(p,"utf8");if(typeof s=="string"||!s.content)continue;let c=await W({filename:s.path,raw:s.content,config:o}),l=diffLines(c,u);l.length>1&&n.push({filePath:p,patch:l});}}return n}async function ke(t){t.forEach(o=>{if(o)return o.added?process.stdout.write(a.success(o.value)):o.removed?process.stdout.write(a.error(o.value)):process.stdout.write(o.value)});}var K=new Command().name("info").description("get information about your project").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async t=>{b$1.info("> project info"),console.log(await T(t.cwd)),b$1.break(),b$1.info("> components.json"),console.log(await y(t.cwd));});var Y={name:"ctxs",version:"0.1.0",description:"Add context to your apps",publishConfig:{access:"public"},license:"MIT",author:{name:"martinklepsch",url:"https://x.com/martinklepsch"},repository:{type:"git",url:"https://github.com/ctxs-ai/cli.git"},files:["dist"],keywords:["llm","context-window","prompts","shadcn"],type:"module",exports:{".":{types:"./dist/index.d.ts",default:"./dist/index.js"},"./registry":{types:"./dist/registry/index.d.ts",default:"./dist/registry/index.js"}},bin:"./dist/index.js",scripts:{dev:"tsup --watch",build:"tsup",typecheck:"tsc --noEmit",clean:"rimraf dist && rimraf components","start:dev":"cross-env REGISTRY_URL=http://localhost:4321/r node dist/index.js","start:prod":"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js",start:"node dist/index.js","format:write":'prettier --write "**/*.{ts,tsx,mdx}" --cache',"format:check":'prettier --check "**/*.{ts,tsx,mdx}" --cache',release:"changeset version","pub:beta":"pnpm build && pnpm publish --no-git-checks --access public --tag beta","pub:next":"pnpm build && pnpm publish --no-git-checks --access public --tag next","pub:release":"pnpm build && pnpm publish --access public",test:"vitest run","test:dev":"REGISTRY_URL=http://localhost:4321/r vitest run"},dependencies:{"@antfu/ni":"^23.2.0","@babel/core":"^7.22.1","@babel/parser":"^7.22.6","@babel/plugin-transform-typescript":"^7.22.5",commander:"^10.0.0",cosmiconfig:"^8.1.3",deepmerge:"^4.3.1",diff:"^5.1.0",execa:"^7.0.0","fast-glob":"^3.3.2","fs-extra":"^11.1.0","https-proxy-agent":"^6.2.0",kleur:"^4.1.5",msw:"^2.7.1","node-fetch":"^3.3.0",ora:"^6.1.2",postcss:"^8.4.24",prompts:"^2.4.2",recast:"^0.23.2","stringify-object":"^5.0.0","ts-morph":"^18.0.0","tsconfig-paths":"^4.2.0",zod:"^3.20.2"},devDependencies:{"@types/babel__core":"^7.20.1","@types/diff":"^5.0.3","@types/fs-extra":"^11.0.1","@types/prompts":"^2.4.2","@types/stringify-object":"^4.0.5",rimraf:"^6.0.1",tsup:"^6.6.3","type-fest":"^3.8.0",typescript:"^4.9.3"}};process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function Ee(){let t=new Command().name("shadcn").description("add components and dependencies to your project").version(Y.version,"-v, --version","display the version number");t.addCommand(J).addCommand(B).addCommand(K),t.parse();}Ee();
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map