{"version":3,"sources":["../src/registry/schema.ts","../src/registry/api.ts","../src/utils/highlighter.ts","../src/utils/logger.ts","../src/utils/handle-error.ts"],"names":["z","registryItemTypeSchema","registryItemFileSchema","registryItemTailwindSchema","registryItemCssVarsSchema","registryItemSchema","registrySchema","registryIndexSchema","stylesSchema","iconsSchema","registryBaseColorSchema","registryResolvedItemsTreeSchema","path","cyan","green","red","yellow","highlighter","logger","args","handleError","error","key","value","deepmerge","HttpsProxyAgent","fetch","REGISTRY_URL","agent","registryCache","getRegistryIndex","result","fetchRegistry","getRegistryItem","name","style","isUrl","resolveTree","index","names","tree","entry","dependencies","component","self","fetchTree","paths","item","getItemTargetPath","config","override","parent","type","url","getRegistryUrl","fetchPromise","response","errorMessages","message","clearRegistryCache","registryResolveItemsTree","registryItems","resolveRegistryItems","payload","resolveRegistryDependencies","visited","resolveDependencies","itemUrl","dependency","registryDependencies","itemRegistryDependencies","getRegistryTypeAliasMap","getRegistryParentMap","map"],"mappings":"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","sourcesContent":["import { z } from \"zod\"\n\n// Note: if you edit the schema here, you must also edit the schema in the\n// apps/www/public/schema/registry-item.json file.\n\nexport const registryItemTypeSchema = z.enum([\n  \"registry:lib\",\n  \"registry:block\",\n  \"registry:component\",\n  \"registry:ui\",\n  \"registry:hook\",\n  \"registry:page\",\n  \"registry:file\",\n\n  // Internal use only\n  \"registry:theme\",\n  \"registry:example\",\n  \"registry:style\",\n  \"registry:internal\",\n])\n\nexport const registryItemFileSchema = z.discriminatedUnion(\"type\", [\n  // Target is required for registry:file and registry:page\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: z.enum([\"registry:file\", \"registry:page\"]),\n    target: z.string(),\n  }),\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: registryItemTypeSchema.exclude([\"registry:file\", \"registry:page\"]),\n    target: z.string().optional(),\n  }),\n])\n\nexport const registryItemTailwindSchema = z.object({\n  config: z\n    .object({\n      content: z.array(z.string()).optional(),\n      theme: z.record(z.string(), z.any()).optional(),\n      plugins: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\nexport const registryItemCssVarsSchema = z.object({\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n})\n\nexport const registryItemSchema = z.object({\n  $schema: z.string().optional(),\n  name: z.string(),\n  type: registryItemTypeSchema,\n  title: z.string().optional(),\n  author: z.string().min(2).optional(),\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registryItemFileSchema).optional(),\n  tailwind: registryItemTailwindSchema.optional(),\n  cssVars: registryItemCssVarsSchema.optional(),\n  meta: z.record(z.string(), z.any()).optional(),\n  docs: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n})\n\nexport type RegistryItem = z.infer<typeof registryItemSchema>\n\nexport const registrySchema = z.object({\n  name: z.string(),\n  homepage: z.string(),\n  items: z.array(registryItemSchema),\n})\n\nexport type Registry = z.infer<typeof registrySchema>\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n)\n\nexport const iconsSchema = z.record(\n  z.string(),\n  z.record(z.string(), z.string())\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVarsV4: z\n    .object({\n      light: z.record(z.string(), z.string()),\n      dark: z.record(z.string(), z.string()),\n    })\n    .optional(),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n\nexport const registryResolvedItemsTreeSchema = registryItemSchema.pick({\n  dependencies: true,\n  devDependencies: true,\n  files: true,\n  tailwind: true,\n  cssVars: true,\n  docs: true,\n})\n","import path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport deepmerge from \"deepmerge\"\nimport { HttpsProxyAgent } from \"https-proxy-agent\"\nimport fetch from \"node-fetch\"\nimport { z } from \"zod\"\n\nimport {\n  iconsSchema,\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemSchema,\n  registryResolvedItemsTreeSchema,\n  stylesSchema,\n} from \"./schema\"\n\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? \"https://ctxs.ai/r\"\n\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nconst registryCache = new Map<string, Promise<any>>()\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n  }\n}\n\nexport async function getRegistryItem(name: string, style: string) {\n  try {\n    const [result] = await fetchRegistry([\n      isUrl(name) ? name : `styles/${style}/${name}.json`,\n    ])\n\n    return registryItemSchema.parse(result)\n  } catch (error) {\n    logger.break()\n    handleError(error)\n    return null\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find((entry) => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex((c) => c.name === component.name) === index\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemSchema>, \"type\">,\n  override?: string\n) {\n  if (override) {\n    return override\n  }\n\n  const [parent, type] = item.type?.split(\":\") ?? []\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  )\n}\n\nexport async function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const url = getRegistryUrl(path)\n\n        // Check cache first\n        if (registryCache.has(url)) {\n          return registryCache.get(url)\n        }\n\n        // Store the promise in the cache before awaiting\n        const fetchPromise = (async () => {\n          const response = await fetch(url, { agent })\n\n          if (!response.ok) {\n            const errorMessages: { [key: number]: string } = {\n              400: \"Bad request\",\n              401: \"Unauthorized\",\n              403: \"Forbidden\",\n              404: \"Not found\",\n              500: \"Internal server error\",\n            }\n\n            if (response.status === 401) {\n              throw new Error(\n                `You are not authorized to access the component at ${highlighter.info(\n                  url\n                )}.\\nIf this is a remote registry, you may need to authenticate.`\n              )\n            }\n\n            if (response.status === 404) {\n              throw new Error(\n                `The component at ${highlighter.info(\n                  url\n                )} was not found.\\nIt may not exist at the registry. Please make sure it is a valid component.`\n              )\n            }\n\n            if (response.status === 403) {\n              throw new Error(\n                `You do not have access to the component at ${highlighter.info(\n                  url\n                )}.\\nIf this is a remote registry, you may need to authenticate or a token.`\n              )\n            }\n\n            const result = await response.json()\n            const message =\n              result && typeof result === \"object\" && \"error\" in result\n                ? result.error\n                : response.statusText || errorMessages[response.status]\n            throw new Error(\n              `Failed to fetch from ${highlighter.info(url)}.\\n${message}`\n            )\n          }\n\n          return response.json()\n        })()\n\n        registryCache.set(url, fetchPromise)\n        return fetchPromise\n      })\n    )\n\n    return results\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport function clearRegistryCache() {\n  registryCache.clear()\n}\n\nexport async function registryResolveItemsTree(\n  names: z.infer<typeof registryItemSchema>[\"name\"][],\n  config: Config\n) {\n  try {\n    const index = await getRegistryIndex()\n    if (!index) {\n      return null\n    }\n\n    // If we're resolving the index, we want it to go first.\n    if (names.includes(\"index\")) {\n      names.unshift(\"index\")\n    }\n\n    let registryItems = await resolveRegistryItems(names, config)\n    let result = await fetchRegistry(registryItems)\n    const payload = z.array(registryItemSchema).parse(result)\n\n    if (!payload) {\n      return null\n    }\n\n    return registryResolvedItemsTreeSchema.parse({\n      dependencies: deepmerge.all(\n        payload.map((item) => item.dependencies ?? [])\n      ),\n      devDependencies: deepmerge.all(\n        payload.map((item) => item.devDependencies ?? [])\n      ),\n      files: deepmerge.all(payload.map((item) => item.files ?? [])),\n    })\n  } catch (error) {\n    handleError(error)\n    return null\n  }\n}\n\nasync function resolveRegistryDependencies(\n  url: string,\n  config: Config\n): Promise<string[]> {\n  const visited = new Set<string>()\n  const payload: string[] = []\n\n  async function resolveDependencies(itemUrl: string) {\n    const url = getRegistryUrl(itemUrl)\n\n    if (visited.has(url)) {\n      return\n    }\n\n    visited.add(url)\n\n    try {\n      const [result] = await fetchRegistry([url])\n      const item = registryItemSchema.parse(result)\n      payload.push(url)\n\n      if (item.registryDependencies) {\n        for (const dependency of item.registryDependencies) {\n          await resolveDependencies(dependency)\n        }\n      }\n    } catch (error) {\n      console.error(\n        `Error fetching or parsing registry item at ${itemUrl}:`,\n        error\n      )\n    }\n  }\n\n  await resolveDependencies(url)\n  return Array.from(new Set(payload))\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    // We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith(\"/json\")) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nfunction isUrl(path: string) {\n  try {\n    new URL(path)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n// TODO: We're double-fetching here. Use a cache.\nexport async function resolveRegistryItems(names: string[], config: Config) {\n  let registryDependencies: string[] = []\n  for (const name of names) {\n    const itemRegistryDependencies = await resolveRegistryDependencies(\n      name,\n      config\n    )\n    registryDependencies.push(...itemRegistryDependencies)\n  }\n\n  return Array.from(new Set(registryDependencies))\n}\n\nexport function getRegistryTypeAliasMap() {\n  return new Map<string, string>([\n    [\"registry:ui\", \"ui\"],\n    [\"registry:lib\", \"lib\"],\n    [\"registry:hook\", \"hooks\"],\n    [\"registry:block\", \"components\"],\n    [\"registry:component\", \"components\"],\n  ])\n}\n\n// Track a dependency and its parent.\nexport function getRegistryParentMap(\n  registryItems: z.infer<typeof registryItemSchema>[]\n) {\n  const map = new Map<string, z.infer<typeof registryItemSchema>>()\n  registryItems.forEach((item) => {\n    if (!item.registryDependencies) {\n      return\n    }\n\n    item.registryDependencies.forEach((dependency) => {\n      map.set(dependency, item)\n    })\n  })\n  return map\n}\n","import { cyan, green, red, yellow } from \"kleur/colors\"\n\nexport const highlighter = {\n  error: red,\n  warn: yellow,\n  info: cyan,\n  success: green,\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(highlighter.error(args.join(\" \")))\n  },\n  warn(...args: unknown[]) {\n    console.log(highlighter.warn(args.join(\" \")))\n  },\n  info(...args: unknown[]) {\n    console.log(highlighter.info(args.join(\" \")))\n  },\n  success(...args: unknown[]) {\n    console.log(highlighter.success(args.join(\" \")))\n  },\n  log(...args: unknown[]) {\n    console.log(args.join(\" \"))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { z } from \"zod\"\n\nexport function handleError(error: unknown) {\n  logger.error(\n    `Something went wrong. Please check the error below for more details.`\n  )\n  logger.error(`If the problem persists, please open an issue on GitHub.`)\n  logger.error(\"\")\n  if (typeof error === \"string\") {\n    logger.error(error)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof z.ZodError) {\n    logger.error(\"Validation failed:\")\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\n      logger.error(`- ${highlighter.info(key)}: ${value}`)\n    }\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error)\n    console.error(error)\n    logger.break()\n    process.exit(1)\n  }\n\n  logger.break()\n  process.exit(1)\n}\n"]}